* Table of Contents							:TOC:
 - [[#general-purposes][General Purposes]]
 - [[#packages-list][Packages list]]
   - [[#must-have][Must have]]
   - [[#coding][Coding]]
   - [[#org-specific][Org specific]]
   - [[#misc][Misc.]]
 - [[#theme][Theme]]
 - [[#yasnippet][Yasnippet]]
 - [[#matlab][Matlab]]
 - [[#latex][LaTeX]]

* General Purposes
I just wanted to share my Emacs configuration since I feel now productive with it.
The main idea of using Emacs was to make my workflow as simple as possible, mainly by using the same tools for many different things. 

I am actually a PhD student so I use Emacs with different programming environment such as C/C++, Web Development (HTML/CSS/PHP/MySQL/JS), Matlab etc. and also writting reports, notes articles and handling my bibliography.

Most of the resources have been found in other users configuration, I have just used some hacks to fit my needs.

Here is a description of how I use Emacs in my everyday's life.
* Packages list
** Must have
- *multiple-cursors.el* [[link]]

  For editing multiple lines or patterns at the same time. 
  Really useful for coding in general, particularly for Matlab and HTML

- *ivy.el*

  For every single completion. The API is really simple to use so that you can add your own ivy's backend. You will find some of the one I wrote in this git.

- *yasnippet.el* 

  For creating snippets. I believe that this one should be a requirement for every coding project since it enables the programmer to get a consistent and uniform program. You can find some of my snippets in this git too.

- *flycheck.el*

  Enables to check your code syntax in real-time, particularly useful when it is integrated to the modeline. 

** Coding
- *autopair.el* 
- 
** Org specific

- *toc-org.el* [[link]]
  To get a table of content at the beginning of this file when editing README.org files
** Misc.
- *powerline.el*
- *window-numbering.el* [[link]]
  Gives an easiest way to navigate through buffers windows

* Theme
I am using the great doom-one theme from https://github.com/hlissner/emacs-doom-theme who did a great job.

* Yasnippet
As I said before, Yasnippet enables the programmer to get a consistent and uniform program. Such tool greatly enhance your workflow.
Moreover, it is really easy to create your own snippets and then accomodate it to your needs.


* Matlab
Matlab is one of the software that I used the most. 
Therefore, I am using the Matlab Mode which works greatly. You can find the source of the code by following this link:  https://sourceforge.net/projects/matlab-emacs/ 

Even if I am using mtags to generate a TAGS file to get my function definitions automatically with Matlab (see https://www.emacswiki.org/emacs/EmacsTags), I found useful to get a list of all functions through Ivy (see https://github.com/abo-abo/swiper). This is mainly related to the way I code in Matlab. When I implement a GUI, I regroup my functions definition under a group title (defined by "%%"). Therefore, I can simply read my code in Ivy like if I was using some code folding.

Here is the result of the function in the ivy window:
#+CAPTION: Ivy Matlab Code Folding
#+NAME:   fig:IvyMatlabCodeFolding
[[https://raw.githubusercontent.com/KirmTwinty/my-emacs/master/img/IvyCodeFolding.png]]

#+BEGIN_SRC emacs-lisp
;;
;; Use IVY to find function definition in MATLAB
;; Add this script to your .emacs configuration file
;;
(defun re-seq (regexp string)
  "Get a list of all regexp matches in a string"
  (save-match-data
    (let ((pos 0)
          matches)
      (while (string-match regexp string pos)
        (push (match-string 0 string) matches)
        (setq pos (match-end 0)))
      matches)))

(defun matlab-find-function ()
  "Find all functions definitions in current MATLAB file."
  (interactive)
  (ivy-read "MATLAB functions: "
	    (reverse (re-seq "^\\s-*function.*$\\|^\\s-*%%.*$" (buffer-string)))
	    :action (lambda (x)
		      (with-current-buffer
			  (progn
			    (beginning-of-buffer)
			    (search-forward-regexp x))))))
(defun matlab-find-function-config ()
  "For use in `matlab-mode-hook'."
  (local-set-key (kbd "C-c f") 'matlab-find-function)
  (local-set-key (kbd "C-c C-f") 'matlab-find-function)
  ;; more here
  )
(add-hook 'matlab-mode-hook 'matlab-find-function-config)
#+END_SRC

For the documentation, I am using Doxygen, adapted to Matlab. I provide some snippets for yasnippet in the matlab folder for Doxygen patterns that fit Matlab.


* LaTeX
I am using LaTeX with org-mode which is really convenient because it offers a simple configuration and multiple options to export the file.
However I needed to setup a little bit my configuration to get something working well.
I am using Ivy (see [[https://github.com/abo-abo/swiper]]) for every completion I need and yasnippet for getting some automation patterns when I write code (see https://github.com/joaotavora/yasnippet).

First, I open my org file on one buffer and on the next one I open my pdf file to get an instant preview of what I am writting.
To do so, I ask DocView to switch to auto-revert-mode so that every time my pdf changes, DocView reloads its content.

#+BEGIN_SRC emacs-lisp
;;
;; DocView Settings 
;;
(setq doc-view-continuous t) ;; Continuous scrolling
;; Refresh automatically (necessary for LATEX preview)
(add-hook 'doc-view-mode-hook 'auto-revert-mode)  
#+END_SRC

Finally, we add a hook for exporting the latex to pdf each time we save. This is actually done when I create my document template (yasnippet) by adding the following code at the end of the document:
#+BEGIN_SRC org :eval never
  # Local Variables:
  # eval: (add-hook 'after-save-hook 'org-latex-export-to-pdf t t)
  # End:

#+END_SRC

The result looks like this:
[[https://raw.githubusercontent.com/KirmTwinty/my-emacs/master/img/Latex.png]]


#+STARTUP: indent
